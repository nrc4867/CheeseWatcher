package client;

import org.jibble.pircbot.IrcException;
import org.jibble.pircbot.PircBot;

import java.io.IOException;
import java.io.Serializable;

public class MessageRelay extends PircBot implements Serializable {

    static final String HOST_NAME = "irc.chat.twitch.tv";
    static final int PORT = 6667;

    static final String ROBSNEAKYMOUSE = "robSneakyMouse";
    static final String ROBDANGER = "robDANGER";

    private String channel;

    private class LoginTimer extends Thread {
        private int WAIT_TIME = 1000;

        @Override
        public void run() {
            try {
                sleep(WAIT_TIME);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    private final LoginTimer timer = new LoginTimer();

    /**
     * The server we connected to liked our password
     */
    private boolean authenticated = false;

    /**
     * Create message relay without verbose mode
     * @see #MessageRelay(String, String, String, boolean)
     */
    public MessageRelay(String channel, String username, String oauth) throws IOException, IrcException{
        this(channel, username, oauth, false);
    }

    /**
     * Connect to a twitch IRC channel
     * @param channel the twitch account
     * @param username twitch username
     * @param oauth a password generated by twitch
     * @param verbose have the irc channel output to chat on creation
     * @throws IOException Connection failed
     * @throws IrcException Connection failed
     */
    public MessageRelay(String channel, String username, String oauth, boolean verbose) throws IOException, IrcException {
        this.setVerbose(verbose);
        this.channel = channel;
        this.setName(username);
        this.setMessageDelay(5000);
        this.connect(HOST_NAME, PORT, oauth);

        timer.start();

        try {
            timer.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        if (!authenticated) throw new IrcException("could not authenticate with twitch server");

        this.joinChannel(channel);
    }

    @Override
    protected void onServerResponse(int code, String response) {
        super.onServerResponse(code, response);
        if (code == 1 & response.contains("Welcome, GLHF!")) {
            authenticated = true;
            timer.interrupt();
        }
    }

    @Override
    protected void onPing(String sourceNick, String sourceLogin, String sourceHostname, String target, String pingValue) {
        super.onPing(sourceNick, sourceLogin, sourceHostname, target, pingValue);
    }

    public void sendMouse() {
        sendMessage(ROBSNEAKYMOUSE);
    }

    public void sendDanger() {
        sendMessage(ROBDANGER);
    }

    private void sendMessage(String message) {
        sendMessage(channel, message);
    }

    public void close() {
        SentFinalMessage.Disconnect(this);
    }

}
